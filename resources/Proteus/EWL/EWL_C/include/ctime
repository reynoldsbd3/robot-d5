/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/06/01 15:39:37 $
 * $Revision: 1.1 $
 */

#ifndef _EWL_CTIME
#define _EWL_CTIME

#ifdef __STARCORE__
#pragma reject_floats off 
#endif 

#include <ansi_parms.h>

#if !_EWL_USING_CW_C_HEADERS_
	#include <time.h>

	#if _EWL_PUT_THIRD_PARTY_C_IN_STD
		#include <ewl_cpp_std_time.h>
	#endif

#else

#include <null.h>
#include <size_t.h>
#include <ewl_lib_ext1.h>
#include <ewl_rsize_t.h>

#if (__dest_os == __win32_os || __dest_os == __wince_os)
	#include <x86/time.win32.h>
#elif defined(__m56800__) || defined(__m56800E__)
	#include <time.56800.h>
#elif __dest_os == __ppc_eabi && _EWL_OS_TIME_SUPPORT
	#include <time.PPCEABI.h>
#elif (__dest_os == __n64_os)
	#include <time.n64.h>
#elif (__dest_os == __dolphin_os)
	#include <time.dolphin.h>
#elif _AEABI_PORTABILITY_LEVEL
	#include <arm/ctime_aeabi>
#endif

#pragma options align=native

_EWL_BEGIN_NAMESPACE_STD
_EWL_BEGIN_EXTERN_C


#if _EWL_CLOCK_T_AVAILABLE
	#ifndef _EWL_CLOCKS_PER_SEC
		#define _EWL_CLOCKS_PER_SEC 60
	#endif

	#ifndef _EWL_CLOCK_T
		#define _EWL_CLOCK_T unsigned long
	#endif

	#define CLOCKS_PER_SEC _EWL_CLOCKS_PER_SEC

	#ifndef  _EWL_CLOCK_T_DEFINED
		typedef _EWL_CLOCK_T clock_t;
		#define _EWL_CLOCK_T_DEFINED
	#endif
#endif /* _EWL_CLOCK_T_AVAILABLE */

#if _EWL_TIME_T_AVAILABLE

	#ifndef _EWL_TIME_T
		#define _EWL_TIME_T long
	#endif

	#ifndef _EWL_TIME_T_DEFINED
		typedef _EWL_TIME_T time_t;
		#define _EWL_TIME_T_DEFINED
	#endif
#endif /* _EWL_TIME_T_AVAILABLE */

#if _EWL_TM_STRUCT_AVAILABLE
	struct tm
	{
		int	tm_sec;		/** [0..60], allows for a positive leap second */
		int	tm_min;		/** [0..59] */
		int	tm_hour;	/** [0..23] */
		int	tm_mday;	/** [1..31] */
		int	tm_mon;		/** [0..11], months since January */
		int	tm_year;	/** years since 1900 */
		int	tm_wday;	/** [0..6], days since Sunday */
		int	tm_yday;	/** [0..365], days since January 1 */
		int	tm_isdst;	/** Daylight Saving Time flag */
	};
#endif /* _EWL_TM_STRUCT_AVAILABLE */

#if _EWL_OS_TIME_SUPPORT

	/** The clock function returns the implementation’s best approximation to the processor
	 *	time used by the program since the beginning of an implementation-defined era related
	 *	only to the program invocation. To determine the time in seconds, the value returned by
	 *	the clock function should be divided by the value of the macro CLOCKS_PER_SEC. If
	 *	the processor time used is not available or its value cannot be represented, the function
	 *	returns the value (clock_t)(-1).
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C clock_t _EWL_CDECL 		clock(void) _EWL_CANT_THROW;

	/** The time function returns the implementation’s best approximation to the current
	 *	calendar time. The value (time_t)(-1) is returned if the calendar time is not
	 *	available. If timer is not a null pointer, the return value is also assigned to the
	 *	object it points to.
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C time_t _EWL_CDECL		time(time_t * timer) _EWL_CANT_THROW;

	/** The gmtime function converts the calendar time pointed to by timer into a brokendown
	 *	time, expressed as UTC.
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C struct tm * _EWL_CDECL	gmtime(const time_t * timer) _EWL_CANT_THROW;

	/** The mktime function converts the broken-down time, expressed as local time, in the
	 *	structure pointed to by timeptr into a calendar time value with the same encoding as
	 *	that of the values returned by the time function. The original values of the tm_wday
	 *	and tm_yday components of the structure are ignored, and the original values of the
	 *	other components are not restricted to the ranges indicated above.270) On successful
	 *	completion, the values of the tm_wday and tm_yday components of the structure are
	 *	set appropriately, and the other components are set to represent the specified calendar
	 *	time, but with their values forced to the ranges indicated above; the final value of
	 *	tm_mday is not set until tm_mon and tm_year are determined.
	 *	Returns the specified calendar time encoded as a value of type
	 *	time_t. If the calendar time cannot be represented, the function returns the value
	 *	(time_t)(-1)
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C time_t _EWL_CDECL		mktime(struct tm * timer) _EWL_CANT_THROW;

	/** The asctime function converts the broken-down time in the structure pointed to by
	 *	timeptr into a string in the form
	 *	Sun Sep 16 01:03:52 1973\n\0
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL		asctime(const struct tm * timer) _EWL_CANT_THROW;

	/** The ctime function converts the calendar time pointed to by timer to local time in the
	 *	form of a string. It is equivalent to asctime(localtime(timer))
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL		ctime(const time_t * timer) _EWL_CANT_THROW;

	/** The localtime function converts the calendar time pointed to by timer into a
	 *	broken-down time, expressed as local time.
	 *  (Available when _EWL_OS_TIME_SUPPORT is set).
	 */
_EWL_IMP_EXP_C struct tm * _EWL_CDECL	localtime(const time_t * timer) _EWL_CANT_THROW;

#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__
	_EWL_IMP_EXP_C errno_t _EWL_CDECL		asctime_s(char * s, rsize_t n, const struct tm * timer) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL		ctime_s(char * s, rsize_t n, const time_t * timer) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C struct tm * _EWL_CDECL	gmtime_s(const time_t * _EWL_RESTRICT timer1, struct tm * _EWL_RESTRICT timer2) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C struct tm * _EWL_CDECL	localtime_s(const time_t * _EWL_RESTRICT timer1, struct tm * _EWL_RESTRICT timer2) _EWL_CANT_THROW;
#endif /* __STDC_WANT_LIB_EXT1__ */


	/** conversion specifiers and ordinary multibyte characters. A conversion specifier
	 *	consists of a % character, possibly followed by an E or O modifier character (described
	 *	below), followed by a character that determines the behavior of the conversion specifier.
	 *	All ordinary multibyte characters (including the terminating null character) are copied
	 *	unchanged into the array. If copying takes place between objects that overlap, the
	 *	behavior is undefined. No more than maxsize characters are placed into the array.
	 *
	 *	Each conversion specifier is replaced by appropriate characters as described in the
	 *	following list. The appropriate characters are determined using the LC_TIME category
	 *	of the current locale and by the values of zero or more members of the broken-down time
	 *	structure pointed to by timeptr, as specified in brackets in the description. If any of
	 *	the specified values is outside the normal range, the characters stored are unspecified.
	 *	
	 *	 %a is replaced by the locale’s abbreviated weekday name. [tm_wday]
	 *	 %A is replaced by the locale’s full weekday name. [tm_wday]
	 *	 %b is replaced by the locale’s abbreviated month name. [tm_mon]
	 *	 %B is replaced by the locale’s full month name. [tm_mon]
	 *	 %c is replaced by the locale’s appropriate date and time representation.
	 *	 %C is replaced by the year divided by 100 and truncated to an integer, as a decimal
	 *		number (00-99). [tm_year]
	 *	 %d is replaced by the day of the month as a decimal number (01-31). [tm_mday]
	 *	 %D is equivalent to ‘‘%m/%d/%y’’. [tm_mon, tm_mday, tm_year]
	 *	 %e is replaced by the day of the month as a decimal number (1-31); a single digit is
	 *		preceded by a space. [tm_mday]
	 *	 %F is equivalent to ‘‘%Y-%m-%d’’ (the ISO 8601 date format). [tm_year, tm_mon, tm_mday]
	 *	 %g is replaced by the last 2 digits of the week-based year (see below) as a decimal
	 *		number (00-99). [tm_year, tm_wday, tm_yday]
	 *	 %G is replaced by the week-based year (see below) as a decimal number (e.g., 1997).
	 *		[tm_year, tm_wday, tm_yday]
	 *	 %h is equivalent to ‘‘%b’’. [tm_mon]
	 *	 %H is replaced by the hour (24-hour clock) as a decimal number (00-23). [tm_hour]
	 *	 %I is replaced by the hour (12-hour clock) as a decimal number (01-12). [tm_hour]
	 *	 %j is replaced by the day of the year as a decimal number (001-366). [tm_yday]
	 *	 %m is replaced by the month as a decimal number (01-12). [tm_mon]
	 *	 %M is replaced by the minute as a decimal number (00-59). [tm_min]
	 *	 %n is replaced by a new-line character.
	 *	 %p is replaced by the locale’s equivalent of the AM/PM designations associated with a
	 *		12-hour clock. [tm_hour]
	 *	 %r is replaced by the locale’s 12-hour clock time. [tm_hour, tm_min, tm_sec]
	 *	 %R is equivalent to ‘‘%H:%M’’. [tm_hour, tm_min]
	 *	 %S is replaced by the second as a decimal number (00-60). [tm_sec]
	 *	 %t is replaced by a horizontal-tab character.
	 *	 %T is equivalent to ‘‘%H:%M:%S’’ (the ISO 8601 time format). [tm_hour, tm_min, tm_sec]
	 *	 %u is replaced by the ISO 8601 weekday as a decimal number (1-7), where Monday is 1. [tm_wday]
	 *	 %U is replaced by the week number of the year (the first Sunday as the first day of week 1)
	 *	 	as a decimal number (00-53). [tm_year, tm_wday, tm_yday]
	 *	 %V is replaced by the ISO 8601 week number (see below) as a decimal number
	 *	 	(01-53). [tm_year, tm_wday, tm_yday]
	 *	 %w is replaced by the weekday as a decimal number (0-6), where Sunday is 0. [tm_wday]
	 *	 %W is replaced by the week number of the year (the first Monday as the first day of
	 *	 	week 1) as a decimal number (00-53). [tm_year, tm_wday, tm_yday]
	 *	 %x is replaced by the locale’s appropriate date representation. [all specified in 7.23.1]
	 *	 %X is replaced by the locale’s appropriate time representation. [all specified in 7.23.1]
	 *	 %y is replaced by the last 2 digits of the year as a decimal number (00-99). [tm_year]
	 *	 %Y is replaced by the year as a decimal number (e.g., 1997). [tm_year]
	 *	 %z is replaced by the offset from UTC in the ISO 8601 format ‘‘-0430’’ (meaning 4
	 *		hours 30 minutes behind UTC, west of Greenwich), or by no characters if no time
	 *		zone is determinable. [tm_isdst]
	 *	 %Z is replaced by the locale’s time zone name or abbreviation, or by no characters if no
	 *		time zone is determinable. [tm_isdst]
	 *	 %% is replaced by %.
	 *
	 *	Some conversion specifiers can be modified by the inclusion of an E or O modifier
	 *	character to indicate an alternative format or specification. If the alternative format or
	 *	specification does not exist for the current locale, the modifier is ignored.
	 *	
	 *	 %Ec is replaced by the locale’s alternative date and time representation.
	 *	 %EC is replaced by the name of the base year (period) in the locale’s alternative
	 *		representation.
	 *	 %Ex is replaced by the locale’s alternative date representation.
	 *	 %EX is replaced by the locale’s alternative time representation.
	 *	 %Ey is replaced by the offset from %EC (year only) in the locale’s alternative
	 *		representation.
	 *	 %EY is replaced by the locale’s full alternative year representation.
	 *	 %Od is replaced by the day of the month, using the locale’s alternative numeric symbols
	 *		(filled as needed with leading zeros, or with leading spaces if there is no alternative
	 *		symbol for zero).
	 *	 %Oe is replaced by the day of the month, using the locale’s alternative numeric symbols
	 *		(filled as needed with leading spaces).
	 *	 %OH is replaced by the hour (24-hour clock), using the locale’s alternative numeric
	 *		symbols.
	 *	 %OI is replaced by the hour (12-hour clock), using the locale’s alternative numeric
	 *		symbols.
	 *	 %Om is replaced by the month, using the locale’s alternative numeric symbols.
	 *	 %OM is replaced by the minutes, using the locale’s alternative numeric symbols.
	 *	 %OS is replaced by the seconds, using the locale’s alternative numeric symbols.
	 *	 %Ou is replaced by the ISO 8601 weekday as a number in the locale’s alternative
	 *		representation, where Monday is 1.
	 *	 %OU is replaced by the week number, using the locale’s alternative numeric symbols.
	 *	 %OV is replaced by the ISO 8601 week number, using the locale’s alternative numeric
	 *		symbols.
	 *	 %Ow is replaced by the weekday as a number, using the locale’s alternative numeric
	 *		symbols.
	 *	 %OW is replaced by the week number of the year, using the locale’s alternative numeric
	 *		symbols.
	 *	 %Oy is replaced by the last 2 digits of the year, using the locale’s alternative numeric
	 *		symbols.
	 *	
	 *	%g, %G, and %V give values according to the ISO 8601 week-based year. In this system,
	 *		weeks begin on a Monday and week 1 of the year is the week that includes January 4th,
	 *		which is also the week that includes the first Thursday of the year, and is also the first
	 *		week that contains at least four days in the year. If the first Monday of January is the
	 *		2nd, 3rd, or 4th, the preceding days are part of the last week of the preceding year; thus,
	 *		for Saturday 2nd January 1999, %G is replaced by 1998 and %V is replaced by 53. If
	 *		December 29th, 30th, or 31st is a Monday, it and any following days are part of week 1 of
	 *		the following year. Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and
 	 *	 %V is replaced by 01.
 	 *
	 *	If a conversion specifier is not one of the above, the behavior is undefined.
	 *
	 *	In the "C" locale, the E and O modifiers are ignored and the replacement strings for the
	 *	following specifiers are:
	 *
	 *		%a the first three characters of %A.
	 *		%A one of ‘‘Sunday’’, ‘‘Monday’’, ... , ‘‘Saturday’’.
	 *		%b the first three characters of %B.
	 *		%B one of ‘‘January’’, ‘‘February’’, ... , ‘‘December’’.
	 *		%c equivalent to ‘‘%a %b %e %T %Y’’.
	 *		%p one of ‘‘AM’’ or ‘‘PM’’.
	 *		%r equivalent to ‘‘%I:%M:%S %p’’.
	 *		%x equivalent to ‘‘%m/%d/%y’’.
	 *		%X equivalent to %T.
	 *		%Z implementation-defined.
	 *
	 *	If the total number of resulting characters including the terminating null character is not
	 *	more than maxsize, the strftime function returns the number of characters placed
	 *	into the array pointed to by s not including the terminating null character. Otherwise,
	 *	zero is returned and the contents of the array are indeterminate.
	 */
_EWL_IMP_EXP_C size_t _EWL_CDECL		strftime(char * _EWL_RESTRICT, size_t, const char * _EWL_RESTRICT, const struct tm * _EWL_RESTRICT) _EWL_CANT_THROW;

#endif /* _EWL_OS_TIME_SUPPORT */

#if _EWL_FLOATING_POINT && _EWL_TIME_T_AVAILABLE
	/** The difftime function returns the difference expressed in seconds as a double
	 *  (Available when _EWL_OS_TIME_SUPPORT and _EWL_TIME_T_AVAILABLE are set).
	 */
	_EWL_IMP_EXP_C double _EWL_CDECL	difftime(time_t timer1, time_t timer2) _EWL_CANT_THROW;
#endif /* _EWL_FLOATING_POINT */

_EWL_END_EXTERN_C
_EWL_END_NAMESPACE_STD

#pragma options align=reset

#if _EWL_NEEDS_EXTRAS
	#include <extras_time.h>
#endif

#if defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE)
#include <time.h>
#endif /*  defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE) */

#endif /* _EWL_USING_CW_C_HEADERS_ */

#ifdef __STARCORE__
#pragma reject_floats reset
#endif 

#endif /* _EWL_CTIME */
