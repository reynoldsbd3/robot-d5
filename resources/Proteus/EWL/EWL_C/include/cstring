/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/06/01 15:39:37 $
 * $Revision: 1.1 $
 */

#ifndef _EWL_CSTRING
#define _EWL_CSTRING

#include <ansi_parms.h>

#if !_EWL_USING_CW_C_HEADERS_
	#include <string.h>

	#if _EWL_PUT_THIRD_PARTY_C_IN_STD
		#include <ewl_cpp_std_string.h>
	#endif
#else

#include <null.h>
#include <size_t.h>
#include <ewl_lib_ext1.h>
#include <ewl_rsize_t.h>

#if _EWL_NEEDS_EXTRAS
	#include <extras_string.h>
#endif

#include <string_api.h>

_EWL_BEGIN_NAMESPACE_STD
_EWL_BEGIN_EXTERN_C

	/** The memset function copies the value of c (converted to an unsigned char) into
	 *	each of the first n characters of the object pointed to by s.
	 *	Returns the value of s.
	 */
_EWL_IMP_EXP_C void * _EWL_CDECL memset(void * s, int c, size_t n) _EWL_CANT_THROW;

	/** The memcmp function compares the first n characters of the object pointed to by s1 to
	 *	the first n characters of the object pointed to by s2.
	 *	The memcmp function returns an integer greater than, equal to, or less than zero,
	 *	accordingly as the object pointed to by s1 is greater than, equal to, or less than the object
	 *	pointed to by s2.
	 */
_EWL_IMP_EXP_C int	  _EWL_CDECL memcmp(const void * s1, const void * s2, size_t n) _EWL_CANT_THROW;

	/** The memcpy function copies n characters from the object pointed to by s2 into the
	 *	object pointed to by s1. If copying takes place between objects that overlap, the behavior
	 *	is undefined.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C void * _EWL_CDECL memcpy(void * _EWL_RESTRICT s1, const void * _EWL_RESTRICT s2, size_t n) _EWL_CANT_THROW;

	/** The memmove function copies n characters from the object pointed to by s2 into the
	 *	object pointed to by s1. Copying takes place as if the n characters from the object
	 *	pointed to by s2 are first copied into a temporary array of n characters that does not
	 *	overlap the objects pointed to by s1 and s2, and then the n characters from the
	 *	temporary array are copied into the object pointed to by s1.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C void * _EWL_CDECL memmove(void * s1, const void * s2, size_t n) _EWL_CANT_THROW;

	/** The strlen function returns the number of characters that precede the terminating null
	 *	character.
	 */
_EWL_IMP_EXP_C size_t _EWL_CDECL strlen(const char * s) _EWL_CANT_THROW;

	/** The strcpy function copies the string pointed to by s2 (including the terminating null
	 *	character) into the array pointed to by s1. If copying takes place between objects that
	 *	overlap, the behavior is undefined.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strcpy(char * _EWL_RESTRICT s1, const char * _EWL_RESTRICT s2) _EWL_CANT_THROW;

	/** The strncpy function copies not more than n characters (characters that follow a null
	 *	character are not copied) from the array pointed to by s2 to the array pointed to by
	 *	s1. If copying takes place between objects that overlap, the behavior is undefined.
	 *	If the array pointed to by s2 is a string that is shorter than n characters, null characters
	 *	are appended to the copy in the array pointed to by s1, until n characters in all have been
	 *	written.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strncpy(char * _EWL_RESTRICT s1, const char * _EWL_RESTRICT s2, size_t n) _EWL_CANT_THROW;

	/** The strcat function appends a copy of the string pointed to by s2 (including the
	 *	terminating null character) to the end of the string pointed to by s1. The initial character
	 *	of s2 overwrites the null character at the end of s1. If copying takes place between
	 *	objects that overlap, the behavior is undefined.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strcat(char * _EWL_RESTRICT s1, const char * _EWL_RESTRICT s2) _EWL_CANT_THROW;

	/** The strncat function appends not more than n characters (a null character and
	 *	characters that follow it are not appended) from the array pointed to by s2 to the end of
	 *	the string pointed to by s1. The initial character of s2 overwrites the null character at the
	 *	end of s1. A terminating null character is always appended to the result. If copying
	 *	takes place between objects that overlap, the behavior is undefined.
	 *	Returns the value of s1.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strncat(char * _EWL_RESTRICT s1, const char * _EWL_RESTRICT s2, size_t n) _EWL_CANT_THROW;

	/** The strcmp function compares the string pointed to by s1 to the string pointed to by s2.
	 *	The strcmp function returns an integer greater than, equal to, or less than zero, accordingly
	 *	as the string pointed to by s1 is greater than, equal to, or less than the string pointed to by s2.
	 */
_EWL_IMP_EXP_C int    _EWL_CDECL strcmp(const char * s1, const char * s2) _EWL_CANT_THROW;

	/** The strncmp function compares not more than n characters (characters that follow a
	 *	null character are not compared) from the array pointed to by s1 to the array pointed to by s2.
	 *	The strncmp function returns an integer greater than, equal to, or less than zero,
	 *	accordingly as the possibly null-terminated array pointed to by s1 is greater than, equal
	 *	to, or less than the possibly null-terminated array pointed to by s2.
	 */
_EWL_IMP_EXP_C int    _EWL_CDECL strncmp(const char * s1, const char * s2, size_t n) _EWL_CANT_THROW;

	/** The strcoll function compares the string pointed to by s1 to the string pointed to by
	 *	s2, both interpreted as appropriate to the LC_COLLATE category of the current locale.
	 *	The strcoll function returns an integer greater than, equal to, or less than zero,
	 *	accordingly as the string pointed to by s1 is greater than, equal to, or less than the string
	 *	pointed to by s2 when both are interpreted as appropriate to the current locale.
	 */
_EWL_IMP_EXP_C int    _EWL_CDECL strcoll(const char *, const char *) _EWL_CANT_THROW;

	/** The strxfrm function transforms the string pointed to by s2 and places the resulting
	 *	string into the array pointed to by s1. The transformation is such that if the strcmp
	 *	function is applied to two transformed strings, it returns a value greater than, equal to, or
	 *	less than zero, corresponding to the result of the strcoll function applied to the same
	 *	two original strings. No more than n characters are placed into the resulting array
	 *	pointed to by s1, including the terminating null character. If n is zero, s1 is permitted to
	 *	be a null pointer. If copying takes place between objects that overlap, the behavior is
	 *	undefined.
	 *	The strxfrm function returns the length of the transformed string (not including the
	 *	terminating null character). If the value returned is n or more, the contents of the array
	 *	pointed to by s1 are indeterminate.
	 */
_EWL_IMP_EXP_C size_t _EWL_CDECL strxfrm(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, size_t) _EWL_CANT_THROW;

#if !defined(__cplusplus)
	/** The memchr function locates the first occurrence of c (converted to an unsigned
	 *	char) in the initial n characters (each interpreted as unsigned char) of the object
	 *	pointed to by s.
	 *	Returns a pointer to the located character, or a null pointer if the
	 *	character does not occur in the object.
	 */
	_EWL_IMP_EXP_C void * _EWL_CDECL memchr(const void * s, int c, size_t n) _EWL_CANT_THROW;

	/** The strchr function locates the first occurrence of c (converted to a char) in the
	 *	string pointed to by s. The terminating null character is considered to be part of the
	 *	string.
	 *	Returns a pointer to the located character, or a null pointer if the
	 *	character does not occur in the string.
	 */
	_EWL_IMP_EXP_C char * _EWL_CDECL strchr(const char * s, int c) _EWL_CANT_THROW;
	
	/** The strpbrk function locates the first occurrence in the string pointed to by s1 of any
	 *	character from the string pointed to by s2.
	 *	Returns a pointer to the character, or a null pointer if no character
	 *	from s2 occurs in s1.
	 */
	_EWL_IMP_EXP_C char * _EWL_CDECL strpbrk(const char * s1, const char * s2) _EWL_CANT_THROW;

	/** The strrchr function locates the last occurrence of c (converted to a char) in the
	 *	string pointed to by s. The terminating null character is considered to be part of the
	 *	string.
	 *	Returns a pointer to the character, or a null pointer if c does not
	 *	occur in the string.
	 */
	_EWL_IMP_EXP_C char * _EWL_CDECL strrchr(const char * s, int c) _EWL_CANT_THROW;

	/** The strstr function locates the first occurrence in the string pointed to by s1 of the
	 *	sequence of characters (excluding the terminating null character) in the string pointed to
	 *	by s2.
	 *	Returns a pointer to the located string, or a null pointer if the string
	 *	is not found. If s2 points to a string with zero length, the function returns s1.
	 */
	_EWL_IMP_EXP_C char * _EWL_CDECL strstr(const char * s1, const char * s2) _EWL_CANT_THROW;
#else
	/** The memchr function locates the first occurrence of c (converted to an unsigned
	 *	char) in the initial n characters (each interpreted as unsigned char) of the object
	 *	pointed to by s.
	 *	Returns a pointer to the located character, or a null pointer if the
	 *	character does not occur in the object.
	 */
	_EWL_IMP_EXP_C const void * _EWL_CDECL memchr(const void * s, int c, size_t n) _EWL_CANT_THROW;

	/** The strchr function locates the first occurrence of c (converted to a char) in the
	 *	string pointed to by s. The terminating null character is considered to be part of the
	 *	string.
	 *	Returns a pointer to the located character, or a null pointer if the
	 *	character does not occur in the string.
	 */
	_EWL_IMP_EXP_C const char * _EWL_CDECL strchr(const char * s, int c) _EWL_CANT_THROW;

	/** The strpbrk function locates the first occurrence in the string pointed to by s1 of any
	 *	character from the string pointed to by s2.
	 *	Returns a pointer to the character, or a null pointer if no character
	 *	from s2 occurs in s1.
	 */
	_EWL_IMP_EXP_C const char * _EWL_CDECL strpbrk(const char * s1, const char * s2) _EWL_CANT_THROW;

	/** The strrchr function locates the last occurrence of c (converted to a char) in the
	 *	string pointed to by s. The terminating null character is considered to be part of the
	 *	string.
	 *	Returns a pointer to the character, or a null pointer if c does not
	 *	occur in the string.
	 */
	_EWL_IMP_EXP_C const char * _EWL_CDECL strrchr(const char * s, int c) _EWL_CANT_THROW;

	/** The strstr function locates the first occurrence in the string pointed to by s1 of the
	 *	sequence of characters (excluding the terminating null character) in the string pointed to
	 *	by s2.
	 *	Returns a pointer to the located string, or a null pointer if the string
	 *	is not found. If s2 points to a string with zero length, the function returns s1.
	 */
	_EWL_IMP_EXP_C const char * _EWL_CDECL strstr(const char * s1 , const char * s2) _EWL_CANT_THROW;
#endif /* __cplusplus */

	/** The strspn function computes the length of the maximum initial segment of the string
	 *	pointed to by s1 which consists entirely of characters from the string pointed to by s2.
	 *	Returns the length of the segment.
	 */
_EWL_IMP_EXP_C size_t _EWL_CDECL strspn(const char * s1, const char * s2) _EWL_CANT_THROW;

	/** The strcspn function computes the length of the maximum initial segment of the string
	 *	pointed to by s1 which consists entirely of characters not from the string pointed to by s2.
	 *	Returns the length of the segment.
	 */
_EWL_IMP_EXP_C size_t _EWL_CDECL strcspn(const char * s1, const char * s2) _EWL_CANT_THROW;

	/** A sequence of calls to the strtok function breaks the string pointed to by s1 into a
	 *	sequence of tokens, each of which is delimited by a character from the string pointed to
	 *	by s2. The first call in the sequence has a non-null first argument; subsequent calls in the
	 *	sequence have a null first argument. The separator string pointed to by s2 may be
	 *	different from call to call.
	 *	
	 *	The first call in the sequence searches the string pointed to by s1 for the first character
	 *	that is not contained in the current separator string pointed to by s2. If no such character
	 *	is found, then there are no tokens in the string pointed to by s1 and the strtok function
	 *	returns a null pointer. If such a character is found, it is the start of the first token.
	 *	
	 *	The strtok function then searches from there for a character that is contained in the
	 *	current separator string. If no such character is found, the current token extends to the
	 *	end of the string pointed to by s1, and subsequent searches for a token will return a null
	 *	pointer. If such a character is found, it is overwritten by a null character, which
	 *	terminates the current token. The strtok function saves a pointer to the following
	 *	character, from which the next search for a token will start.
	 *	
	 *	Each subsequent call, with a null pointer as the value of the first argument, starts
	 *	searching from the saved pointer and behaves as described above.
	 *	
	 *	The implementation shall behave as if no library function calls the strtok function.
	 *	
	 *	Returns a pointer to the first character of a token, or a null pointer
	 *	if there is no token.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strtok(char * _EWL_RESTRICT, const char * _EWL_RESTRICT) _EWL_CANT_THROW;

	/** The strerror function maps the number in errnum to a message string. Typically,
	 *	the values for errnum come from errno, but strerror shall map any value of type
	 *	int to a message.
	 *	Returns a pointer to the string, the contents of which are locale specific.
	 *	The array pointed to shall not be modified by the program, but may be
	 *	overwritten by a subsequent call to the strerror function.
	 */
_EWL_IMP_EXP_C char * _EWL_CDECL strerror(int) _EWL_CANT_THROW;

#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__
	_EWL_IMP_EXP_C errno_t _EWL_CDECL memcpy_s(void * _EWL_RESTRICT, rsize_t, const void * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL memmove_s(void *, rsize_t, const void *, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C size_t _EWL_CDECL strnlen_s(const char *, size_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strcpy_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strncpy_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strcat_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strncat_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strerror_s(char *, rsize_t, errno_t) _EWL_CANT_THROW;

	_EWL_IMP_EXP_C char * _EWL_CDECL strtok_s(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, char ** _EWL_RESTRICT) _EWL_CANT_THROW;
#endif /* __STDC_WANT_LIB_EXT1__ */

_EWL_END_EXTERN_C

#if defined(__cplusplus)

	extern "C++" {

	inline
	char* _EWL_CDECL
	strchr(char* s, int c)
	{
		return const_cast<char*>(strchr(static_cast<const char*>(s), c));
	}

	inline
	char* _EWL_CDECL
	strpbrk(char* s1, const char* s2)
	{
		return const_cast<char*>(strpbrk(static_cast<const char*>(s1), s2));
	}

	inline
	char* _EWL_CDECL
	strrchr(char* s, int c)
	{
		return const_cast<char*>(strrchr(static_cast<const char*>(s), c));
	}

	inline
	char* _EWL_CDECL
	strstr(char* s1, const char* s2)
	{
		return const_cast<char*>(strstr(static_cast<const char*>(s1), s2));
	}

	inline
	void* _EWL_CDECL
	memchr(void* s, int c, size_t n)
	{
		return const_cast<void*>(memchr(static_cast<const void*>(s), c, n));
	}

	} /* extern "C" */

#endif /* __cplusplus */

_EWL_END_NAMESPACE_STD

#if defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE)
#include <string.h>
#endif /*  defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE) */

#endif /* _EWL_USING_CW_C_HEADERS_ || __PALMOS_TRAPS__ */

#endif /* _EWL_CSTRING */
