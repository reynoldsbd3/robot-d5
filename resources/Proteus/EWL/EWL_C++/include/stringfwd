/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/07/12 22:31:16 $
 * $Revision: 1.3 $
 */

// stringfwd

#ifndef _STRINGFWD
#define _STRINGFWD

// WARNING
//
// stringfwd is a non-standard, non-portable header.
//
// WARNING

/*  stringfwd synopsis

	synopsis skipped.  Code self explanatory

*/

#include <ewlconfig>

#ifdef __CWCC__
#pragma options align=native

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#if _EWL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#if _EWL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT
#endif

#ifdef __GNUC__
extern "C++" {
#endif // __GNUC__

#ifndef _EWL_NO_CPP_NAMESPACE
	namespace std {
#endif

template <class T> class allocator;
template<class charT> struct char_traits;
template <class charT,
          class traits = char_traits<charT>,
          class Allocator = allocator<charT> > class basic_string;
typedef basic_string<char, char_traits<char>, allocator<char> > string;
#ifndef _EWL_NO_WCHART_CPP_SUPPORT
	typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;
#endif

#ifndef _EWL_NO_CPP_NAMESPACE
	}  // namespace std
#endif

#ifdef __GNUC__
} // extern "C++"
#endif //  __GNUC__

#ifdef __CWCC__
#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset
#endif

#endif // _STRINGFWD
