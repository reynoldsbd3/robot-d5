/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/07/12 22:31:16 $
 * $Revision: 1.3 $
 */

#ifndef _ITERATOR
#define _ITERATOR

#ifndef _ITERATOR_BASE
#include <iterator_base>
#endif

/*  iterator synopsis

namespace std
{
	//  lib.stream.iterators, stream iterators:

template <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
class istream_iterator
	: public iterator<input_iterator_tag, T, Distance, const T*, const T&>
{
public:
	typedef charT char_type
	typedef traits traits_type;
	typedef basic_istream<charT,traits> istream_type;

	istream_iterator();
	istream_iterator(istream_type& s);
	istream_iterator(const istream_iterator& x);
	~istream_iterator();

	const T& operator*() const;
	const T* operator->() const;
	istream_iterator& operator++();
	istream_iterator  operator++(int);
};

template <class T, class charT, class traits, class Distance>
bool
operator==(const istream_iterator<T,charT,traits,Distance>& x, const istream_iterator<T,charT,traits,Distance>& y);

template <class T, class charT, class traits, class Distance>
bool
operator!=(const istream_iterator<T,charT,traits,Distance>& x, const istream_iterator<T,charT,traits,Distance>& y);

template <class T, class charT = char, class traits = char_traits<charT> >
class ostream_iterator
	: public iterator<output_iterator_tag, void, void, void, void>
{
public:
	typedef charT char_type;
	typedef traits traits_type;
	typedef basic_ostream<charT,traits> ostream_type;

	ostream_iterator(ostream_type& s);
	ostream_iterator(ostream_type& s, const charT* delimiter);
	ostream_iterator(const ostream_iterator& x);
	~ostream_iterator();
	ostream_iterator& operator=(const T& value);

	ostream_iterator& operator*();
	ostream_iterator& operator++();
	ostream_iterator& operator++(int);
};

template<class charT, class traits = char_traits<charT> >
class istreambuf_iterator
	: public iterator<input_iterator_tag, charT, typename traits::off_type, charT*, charT&>
{
public:
	typedef charT                         char_type;
	typedef traits                        traits_type;
	typedef typename traits::int_type     int_type;
	typedef basic_streambuf<charT,traits> streambuf_type;
	typedef basic_istream<charT,traits>   istream_type;

	class proxy;

	istreambuf_iterator() throw();
	istreambuf_iterator(istream_type& s) throw();
	istreambuf_iterator(streambuf_type* s) throw();
	istreambuf_iterator(const proxy& p) throw();
	charT operator*() const;
	istreambuf_iterator& operator++();
	proxy operator++(int);
	bool equal(istreambuf_iterator& b);
};

template <class charT, class traits>
bool
operator==(const istreambuf_iterator<charT,traits>& a, const istreambuf_iterator<charT,traits>& b);

template <class charT, class traits>
bool
operator!=(const istreambuf_iterator<charT,traits>& a, const istreambuf_iterator<charT,traits>& b);

template <class charT, class traits = char_traits<charT> >
class ostreambuf_iterator
	: public iterator<output_iterator_tag, void, void, void, void>
{
public:
	typedef charT                         char_type;
	typedef traits                        traits_type;
	typedef basic_streambuf<charT,traits> streambuf_type;
	typedef basic_ostream<charT,traits>   ostream_type;

	ostreambuf_iterator(ostream_type& s) throw();
	ostreambuf_iterator(streambuf_type* s) throw();
	ostreambuf_iterator& operator=(charT c);

	ostreambuf_iterator& operator*();
	ostreambuf_iterator& operator++();
	ostreambuf_iterator& operator++(int);
	bool failed() const throw();
};

}  // std
*/

#include <ewlconfig>

#include <cstddef>
#include <iosfwd>
#include <ewl_utility>
#include <utility>
#include <char_traits>

#ifdef _EWL_DEBUG
	#include <stdexcept>
#endif

#ifdef __CWCC__
#pragma options align=native

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#if _EWL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#if _EWL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT
#endif

extern "C++" {

#ifndef _EWL_NO_CPP_NAMESPACE
	namespace std {
#endif

#ifndef _EWL_NO_IO

//  lib.stream.iterators, stream iterators:

// istream_iterator

template <class T>
struct __istream_include_check
{
	static const bool value = false;
};

template <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
class istream_iterator
	: public iterator<input_iterator_tag, T, Distance, const T*, const T&>
{
public:
	typedef charT char_type;
	typedef traits traits_type;
	typedef basic_istream<charT, traits> istream_type;
	istream_iterator();
	istream_iterator(istream_type& s);

	const T& operator*() const;
	const T* operator->() const;
	istream_iterator& operator++();
	istream_iterator  operator++(int);
	basic_istream<charT, traits>* in_stream_;
	T value_;
private:

	template <class T1, class charT1, class traits1, class Distance1>
	friend bool operator== (const istream_iterator& x, const istream_iterator& y);
	template <class T1, class charT1, class traits1, class Distance1>
	friend bool operator!= (const istream_iterator& x, const istream_iterator& y);
};

template <class T, class charT, class traits, class Distance>
inline
istream_iterator<T, charT, traits, Distance>::istream_iterator()
	: in_stream_(0)
{
}

template <class T, class charT, class traits, class Distance>
inline
istream_iterator<T, charT, traits, Distance>::istream_iterator(istream_type& s)
	: in_stream_(&s)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value, 
		"<istream> has to be included to use istream_iterator");
#endif
	if (!(*in_stream_ >> value_))
		in_stream_ = 0;
}

template <class T, class charT, class traits, class Distance>
inline
const T&
istream_iterator<T, charT, traits, Distance>::operator*() const
{
	return value_;
}

template <class T, class charT, class traits, class Distance>
inline
const T*
istream_iterator<T, charT, traits, Distance>::operator->() const
{
	return &value_;
}

template <class T, class charT, class traits, class Distance>
inline
istream_iterator<T, charT, traits, Distance>&
istream_iterator<T, charT, traits, Distance>::operator++()
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value, 
		"<istream> has to be included to use istream_iterator");
#endif
	if (!(*in_stream_ >> value_))
		in_stream_ = 0;
	return *this;
}

template <class T, class charT, class traits, class Distance>
inline
istream_iterator<T, charT, traits, Distance>
istream_iterator<T, charT, traits, Distance>::operator++(int)
{
	istream_iterator tmp(*this);
	operator++();
	return tmp;
}

template <class T, class charT, class traits, class Distance>
inline
bool
operator==(const istream_iterator<T,charT,traits,Distance>& x,
           const istream_iterator<T,charT,traits,Distance>& y)
{
	return static_cast<bool>(x.in_stream_ == y.in_stream_);
}

template <class T, class charT, class traits, class Distance>
inline
bool
operator!=(const istream_iterator<T,charT,traits,Distance>& x,
           const istream_iterator<T,charT,traits,Distance>& y)
{
	return static_cast<bool>(x.in_stream_ != y.in_stream_);
}

// ostream_iterator

template <class T>
struct __ostream_include_check
{
	static const bool value = false;
};

template <class T, class charT = char, class traits = char_traits<charT> >
class ostream_iterator
	: public iterator<output_iterator_tag, void, void, void, void>
{
public:
	typedef charT char_type;
	typedef traits traits_type;
	typedef basic_ostream<charT,traits> ostream_type;
	ostream_iterator(ostream_type& s);
	ostream_iterator(ostream_type& s, const charT* delimiter);
	ostream_iterator& operator=(const T& value);

	ostream_iterator& operator*();
	ostream_iterator& operator++();
	ostream_iterator& operator++(int);
private:
	basic_ostream<charT,traits>* out_stream_;
	const charT* delim_;
};

template <class T, class charT, class traits>
inline
ostream_iterator<T, charT, traits>::ostream_iterator(ostream_type& s)
	: out_stream_(&s),
	  delim_(0)
{
}

template <class T, class charT, class traits>
inline
ostream_iterator<T, charT, traits>::ostream_iterator(ostream_type& s, const charT* delimiter)
	: out_stream_(&s),
	  delim_(delimiter)
{
}

template <class T, class charT, class traits>
inline
ostream_iterator<T,charT,traits>&
ostream_iterator<T, charT, traits>::operator=(const T& value)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__ostream_include_check<ostream_type>::value,
		"<ostream> has to be included to use ostream_iterator");
#endif
	*out_stream_ << value;
	if(delim_ != 0)
		*out_stream_ << delim_;
	return *this;
}

template <class T, class charT, class traits>
inline
ostream_iterator<T,charT,traits>&
ostream_iterator<T, charT, traits>::operator*()
{
	return *this;
}

template <class T, class charT, class traits>
inline
ostream_iterator<T,charT,traits>&
ostream_iterator<T, charT, traits>::operator++()
{
	return *this;
}

template <class T, class charT, class traits>
inline
ostream_iterator<T,charT,traits>&
ostream_iterator<T, charT, traits>::operator++(int)
{
	return *this;
}

// istreambuf_iterator

template<class charT, class traits>
class istreambuf_iterator
	: public iterator<input_iterator_tag, charT, typename traits::off_type, charT*, charT&>
{
public:
	typedef charT                         char_type;
	typedef traits                        traits_type;
	typedef typename traits::int_type     int_type;
	typedef basic_streambuf<charT,traits> streambuf_type;
	typedef basic_istream<charT,traits>   istream_type;

	class proxy
	{
	public:
		charT operator*()
		{
			return keep_;
		}
	private:
		charT keep_;
		basic_streambuf<charT,traits>* sbuf_;

		proxy(charT c, basic_streambuf<charT, traits>* sbuf)
			: keep_(c),
			  sbuf_(sbuf)
		{
		}

		friend class istreambuf_iterator;
	};

	istreambuf_iterator() _EWL_NO_THROW;
	istreambuf_iterator(istream_type& s) _EWL_NO_THROW;
	istreambuf_iterator(streambuf_type* s) _EWL_NO_THROW;
	istreambuf_iterator(const proxy& p) _EWL_NO_THROW;
	charT operator*() const;
	istreambuf_iterator& operator++();
	proxy operator++(int);
	bool equal(const istreambuf_iterator& b) const;
private:
	streambuf_type* sbuf_;
};

template<class charT, class traits>
inline
istreambuf_iterator<charT, traits>::istreambuf_iterator() _EWL_NO_THROW
	: sbuf_(0)
{
}

template<class charT, class traits>
inline
istreambuf_iterator<charT, traits>::istreambuf_iterator(istream_type& s) _EWL_NO_THROW
	: sbuf_(s.rdbuf())
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	if (sbuf_ != 0 && traits::eq_int_type(sbuf_->sgetc(), traits::eof()))
		sbuf_ = 0;
}

template<class charT, class traits>
inline
istreambuf_iterator<charT, traits>::istreambuf_iterator(streambuf_type* s) _EWL_NO_THROW
	: sbuf_(s)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	if (sbuf_ != 0 && traits::eq_int_type(sbuf_->sgetc(), traits::eof()))
		sbuf_ = 0;
}

template<class charT, class traits>
inline
istreambuf_iterator<charT, traits>::istreambuf_iterator(const proxy& p) _EWL_NO_THROW
	: sbuf_(p.sbuf_)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	if (sbuf_ != 0 && traits::eq_int_type(sbuf_->sgetc(), traits::eof()))
		sbuf_ = 0;
}

template<class charT, class traits>
inline
charT
istreambuf_iterator<charT, traits>::operator*() const
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	return traits::to_char_type(sbuf_->sgetc());
}

template<class charT, class traits>
inline
istreambuf_iterator<charT, traits>&
istreambuf_iterator<charT, traits>::operator++()
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	sbuf_->sbumpc();
	if (traits::eq_int_type(sbuf_->sgetc(), traits::eof()))
		sbuf_ = 0;
	return *this;
}

template<class charT, class traits>
inline
typename istreambuf_iterator<charT, traits>::proxy
istreambuf_iterator<charT, traits>::operator++(int)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__istream_include_check<istream_type>::value,
		"<istream> has to be included to use istreambuf_iterator");
#endif
	proxy result(traits::to_char_type(sbuf_->sbumpc()), sbuf_);
	if (traits::eq_int_type(sbuf_->sgetc(), traits::eof()))
		sbuf_ = 0;
	return result;
}

template<class charT, class traits>
inline
bool
istreambuf_iterator<charT, traits>::equal(const istreambuf_iterator& b) const
{
	return static_cast<bool>(!(static_cast<bool>(sbuf_ != 0) ^ static_cast<bool>(b.sbuf_ != 0)));
}

template <class charT, class traits>
inline
bool
operator==(const istreambuf_iterator<charT,traits>& a, const istreambuf_iterator<charT,traits>& b)
{
	return a.equal(b);
}

template <class charT, class traits>
inline
bool
operator!=(const istreambuf_iterator<charT,traits>& a, const istreambuf_iterator<charT,traits>& b)
{
	return static_cast<bool>(!a.equal(b));
}

template <class charT, class traits>
class ostreambuf_iterator
	: public iterator<output_iterator_tag, void, void, void, void>
{
public:
	typedef charT                         char_type;
	typedef traits                        traits_type;
	typedef basic_streambuf<charT,traits> streambuf_type;
	typedef basic_ostream<charT,traits>   ostream_type;

	ostreambuf_iterator(ostream_type& s) _EWL_NO_THROW;
	ostreambuf_iterator(streambuf_type* s) _EWL_NO_THROW;
	ostreambuf_iterator& operator=(charT c);

	ostreambuf_iterator& operator*();
	ostreambuf_iterator& operator++();
	ostreambuf_iterator& operator++(int);
	bool failed() const _EWL_NO_THROW;
private:
	streambuf_type* sbuf_;
};

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>::ostreambuf_iterator(ostream_type& s) _EWL_NO_THROW
	: sbuf_(s.rdbuf())
{
}

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>::ostreambuf_iterator(streambuf_type* s) _EWL_NO_THROW
	: sbuf_(s)
{
}

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>&
ostreambuf_iterator<charT, traits>::operator=(charT c)
{
#if defined(__CWCC__) && __CWCC__ >= 0x4000
	__static_assert(
		__ostream_include_check<ostream_type>::value,
		"<ostream> has to be included to use ostreambuf_iterator");
#endif
	if (sbuf_ != 0 && traits::eq_int_type(sbuf_->sputc(c), traits::eof()))
		sbuf_ = 0;
	return *this;
}

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>&
ostreambuf_iterator<charT, traits>::operator*()
{
	return *this;
}

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>&
ostreambuf_iterator<charT, traits>::operator++()
{
	return *this;
}

template <class charT, class traits>
inline
ostreambuf_iterator<charT, traits>&
ostreambuf_iterator<charT, traits>::operator++(int)
{
	return *this;
}

template <class charT, class traits>
inline
bool
ostreambuf_iterator<charT, traits>::failed() const _EWL_NO_THROW
{
	return static_cast<bool>(sbuf_ == 0);
}

#endif // _EWL_NO_IO

#ifndef _EWL_NO_CPP_NAMESPACE
	} // namespace std
#endif

} // extern "C++"

#ifdef __CWCC__
#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset
#endif

#include <istream>

#endif // _ITERATOR
