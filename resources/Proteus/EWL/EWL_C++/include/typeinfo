/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/07/12 22:31:16 $
 * $Revision: 1.3 $
 */

#ifndef _TYPEINFO
#define _TYPEINFO

/*  typeinfo synopsis

namespace std
{
class type_info
{
public:
	bool operator== (const type_info& rhs) const;
	bool operator!= (const type_info& rhs) const;
	bool before (const type_info& rhs) const;
	const char* name () const;

private:
	type_info (const type_info&);             //  not defined
	type_info& operator= (const type_info&);  //  not defined
};

class bad_cast : public exception {
public :
	bad_cast() throw();
	bad_cast(const bad_cast&) throw();
	bad_cast& operator=(const bad_cast&) throw();
	virtual ~bad_cast() throw();
	virtual const char* what() const throw();
};

class bad_typeid : public exception {
public:
	bad_typeid() throw();
	bad_typeid(const bad_typeid&) throw();
	bad_typeid& operator=(const bad_typeid&) throw();
	virtual ~bad_typeid() throw();
	virtual const char* what() const throw();
};

}  // std
*/

#ifdef __CWCC__
#pragma warn_undefmacro off
#endif

#include <ewlconfig>
#include <exception>
#include <cstring>

#ifdef __CWCC__
#pragma options align=native

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#if _EWL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#if _EWL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT
#endif

#ifdef __GNUC__
extern "C++" {
#endif // __GNUC__

#ifndef _EWL_NO_CPP_NAMESPACE
	namespace std {
#endif

#if __GXX_ABI_VERSION || __IA64_CPP_ABI__

class type_info
{
public:
	virtual ~type_info();
	bool operator==(const type_info &rhs) const;
	bool operator!=(const type_info &rhs) const { return !operator==(rhs); }
	bool before(const type_info &rhs) const;
	const char* name() const {return __type_name;}
private:
	type_info (const type_info& rhs);               //  not defined
	type_info& operator= (const type_info& rhs);    //  not defined

	const char* __type_name;
};

#else  // __GXX_ABI_VERSION || __IA64_CPP_ABI__

class type_info
{
		const char  *tname;
		const void  *tbase;

	public:
		bool operator== (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) == 0);}
		bool operator!= (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) != 0);}
		bool before (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) < 0);}
		const char* name () const {return tname;}

	private:
		type_info (const type_info&);
		type_info& operator= (const type_info&);
};

#endif  // __GXX_ABI_VERSION || __IA64_CPP_ABI__

class bad_cast : public exception {
public :
	bad_cast() _EWL_NO_THROW {}
	bad_cast(const bad_cast&) _EWL_NO_THROW {}
	bad_cast& operator=(const bad_cast&) _EWL_NO_THROW {return *this;}
	virtual ~bad_cast() _EWL_NO_THROW {}
	virtual const char* what() const _EWL_NO_THROW {return "bad_cast";}
};

class bad_typeid : public exception {
public:
	bad_typeid() _EWL_NO_THROW {}
	bad_typeid(const bad_typeid&) _EWL_NO_THROW {}
	bad_typeid& operator=(const bad_typeid&) _EWL_NO_THROW {return *this;}
	virtual ~bad_typeid() _EWL_NO_THROW {}
	virtual const char* what() const _EWL_NO_THROW {return "bad_typeid";}
};

#ifndef _EWL_NO_CPP_NAMESPACE 
	}
#endif

#ifdef __GNUC__
} // extern "C++"
#endif // __GNUC__

#ifdef __CWCC__
#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset
#pragma warn_undefmacro reset
#endif

#endif  // _TYPEINFO
