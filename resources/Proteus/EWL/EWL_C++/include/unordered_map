/* EWL
 * Copyright © 2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/06/28 06:42:32 $
 * $Revision: 1.2 $
 */

#ifndef _UNORDERED_MAP
#define _UNORDERED_MAP

/*
// unordered_map synopsis

// namespace std { namespace tr1 {
template <class Key,
          class T,
          class Hash = hash<Key>,
          class Pred = std::equal_to<Key>,
          class Alloc = std::allocator<std::pair<const Key, T> > >
class unordered_map
{
public:
  // types
  typedef Key key_type;
  typedef std::pair<const Key, T> value_type;
  typedef T mapped_type;
  typedef Hash hasher;
  typedef Pred key_equal;
  typedef Alloc allocator_type;
  typedef typename allocator_type::pointer pointer;
  typedef typename allocator_type::const_pointer const_pointer;
  typedef typename allocator_type::reference reference;
  typedef typename allocator_type::const_reference const_reference;
  typedef implementation-defined size_type;
  typedef implementation-defined difference_type;
  typedef implementation-defined iterator;
  typedef implementation-defined const_iterator;
  typedef implementation-defined local_iterator;
  typedef implementation-defined const_local_iterator;

  // construct/destroy/copy
  explicit unordered_map(size_type n = implementation-defined ,
                         const hasher& hf = hasher(),
                         const key_equal& eql = key_equal(),
                         const allocator_type& a = allocator_type());

  template <class InputIterator>
  unordered_map(InputIterator f, InputIterator l,
                size_type n = implementation-defined ,
                const hasher& hf = hasher(),
                const key_equal& eql = key_equal(),
                const allocator_type& a = allocator_type());

  unordered_map(const unordered_map&);
  ~unordered_map();
  unordered_map& operator=(const unordered_map&);

  allocator_type get_allocator() const;

  // size and capacity
  bool empty() const;
  size_type size() const;
  size_type max_size() const;

  // iterators
  iterator begin();
  const_iterator begin() const;
  iterator end();
  const_iterator end() const;

  // modifiers
  std::pair<iterator, bool> insert(const value_type& obj);
  iterator insert(iterator hint, const value_type& obj);
  const_iterator insert(const_iterator hint, const value_type& obj);
  template <class InputIterator>
  void insert(InputIterator first, InputIterator last);

  iterator erase(iterator position);
  const_iterator erase(const_iterator position);
  size_type erase(const key_type& k);
  iterator erase(iterator first, iterator last);
  const_iterator erase(const_iterator first, const_iterator last);

  void clear();
  void swap(unordered_map&);

  // observers
  hasher hash_function() const;
  key_equal key_eq() const;

  // lookup
  iterator find(const key_type& k);
  const_iterator find(const key_type& k) const;
  size_type count(const key_type& k) const;

  std::pair<iterator, iterator> equal_range(const key_type& k);
  std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const;

  mapped_type& operator[](const key_type& k);

  // bucket interface
  size_type bucket_count() const;
  size_type max_bucket_count() const;
  size_type bucket_size(size_type n);
  size_type bucket(const key_type& k) const;
  local_iterator begin(size_type n) const;
  const_local_iterator begin(size_type n) const;
  local_iterator end(size_type n);
  const_local_iterator end(size_type n) const;

  // hash policy
  float load_factor() const;
  float max_load_factor() const;
  void max_load_factor(float z);
  void rehash(size_type n);
};

template <class Key,
          class T,
          class Hash = hash<Key>,
          class Pred = std::equal_to<Key>,
          class Alloc = std::allocator<std::pair<const Key, T> > >
class unordered_multimap
{
public:
  // types
  typedef Key key_type;
  typedef std::pair<const Key, T> value_type;
  typedef T mapped_type;
  typedef Hash hasher;
  typedef Pred key_equal;
  typedef Alloc allocator_type;
  typedef typename allocator_type::pointer pointer;
  typedef typename allocator_type::const_pointer const_pointer;
  typedef typename allocator_type::reference reference;
  typedef typename allocator_type::const_reference const_reference;
  typedef implementation-defined size_type;
  typedef implementation-defined difference_type;
  typedef implementation-defined iterator;
  typedef implementation-defined const_iterator;
  typedef implementation-defined local_iterator;
  typedef implementation-defined const_local_iterator;

  // construct/destroy/copy
  explicit unordered_multimap(size_type n = implementation-defined ,
                              const hasher& hf = hasher(),
                              const key_equal& eql = key_equal(),
                              const allocator_type& a = allocator_type());

  template <class InputIterator>
  unordered_multimap(InputIterator f, InputIterator l,
                     size_type n = implementation-defined ,
                     const hasher& hf = hasher(),
                     const key_equal& eql = key_equal(),
                     const allocator_type& a = allocator_type());

  unordered_multimap(const unordered_multimap&);
  ~unordered_multimap();
  unordered_multimap& operator=(const unordered_multimap&);

  allocator_type get_allocator() const;

  // size and capacity
  bool empty() const;
  size_type size() const;
  size_type max_size() const;

  // iterators
  iterator begin();
  const_iterator begin() const;
  iterator end();
  const_iterator end() const;

  // modifiers
  iterator insert(const value_type& obj);
  iterator insert(iterator hint, const value_type& obj);
  const_iterator insert(const_iterator hint, const value_type& obj);
  template <class InputIterator> void insert(InputIterator first, InputIterator last);
  iterator erase(iterator position);
  const_iterator erase(const_iterator position);
  size_type erase(const key_type& k);
  iterator erase(iterator first, iterator last);
  const_iterator erase(const_iterator first, const_iterator last);
  void clear();
  void swap(unordered_multimap&);

  // observers
  hasher hash_function() const;
  key_equal key_eq() const;

  // lookup
  iterator find(const key_type& k);
  const_iterator find(const key_type& k) const;
  size_type count(const key_type& k) const;
  std::pair<iterator, iterator> equal_range(const key_type& k);
  std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const;

  // bucket interface
  size_type bucket_count() const;
  size_type max_bucket_count() const;
  size_type bucket_size(size_type n);
  size_type bucket(const key_type& k) const;
  local_iterator begin(size_type n) const;
  const_local_iterator begin(size_type n) const;
  local_iterator end(size_type n);
  const_local_iterator end(size_type n) const;

  // hash policy
  float load_factor() const;
  float max_load_factor() const;
  void max_load_factor(float z);
  void rehash(size_type n);
};

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,
          unordered_map<Key, T, Hash, Pred, Alloc>& y);

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>& x,
          unordered_multimap<Key, T, Hash, Pred, Alloc>& y);

}} // tr1, std

*/

#include <ewlconfig>
#include <functional>   // for hash
#include <hash_table>   // CodeWarrior::hash_table

#ifdef __CWCC__
#pragma options align=native
#endif

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
        #if _EWL_FORCE_ENUMS_ALWAYS_INT
                #pragma enumsalwaysint on
        #else
                #pragma enumsalwaysint off
        #endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
        #if _EWL_FORCE_ENABLE_BOOL_SUPPORT
                #pragma bool on
        #else
                #pragma bool off
        #endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT

#if __CWCC__ >= 0x3200

extern "C++" {

_EWL_START_TR1_NAMESPACE

template <
  class Key,
  class T,
  class Hash = hash<Key>,
  class Compare = _STD::equal_to<Key>,
  class Allocator = _STD::allocator<_STD::pair<const Key, T> >
  >
class unordered_map
{
public:
  // types
  typedef Key key_type;
  typedef _STD::pair<const Key, T> value_type;
  typedef T mapped_type;
  typedef Hash hasher;
  typedef Compare key_equal;
  typedef Allocator allocator_type;
  typedef typename allocator_type::pointer         pointer;
  typedef typename allocator_type::const_pointer   const_pointer;
  typedef typename allocator_type::reference       reference;
  typedef typename allocator_type::const_reference const_reference;

  typedef typename allocator_type::size_type       size_type;
  typedef typename allocator_type::difference_type difference_type;

private:
  typedef typename CodeWarrior::remove_const<key_type>::type     non_const_key_type;
  typedef _STD::pair<non_const_key_type, mapped_type>       non_const_value_type;

  template <bool, bool = true>
  class value_hash_imp
    : hasher
  {
  public:
    typedef value_type argument_type;
    typedef size_type  result_type;

    size_type operator()(const value_type& x) const
    {return key_hash()(x.first);}
    size_type operator()(const non_const_value_type& x) const
    {return key_hash()(x.first);}
    size_type operator()(const key_type& x) const
    {return key_hash()(x);}
  private:
    value_hash_imp() {}
    value_hash_imp(hasher h) : hasher(h) {}
    const hasher& key_hash() const {return *this;}

    friend class unordered_map;
  };

  template <bool b>
  class value_hash_imp<false, b>
  {
  public:
    typedef value_type argument_type;
    typedef size_type  result_type;

    size_type operator()(const value_type& x) const
    {return hash_(x.first);}
    size_type operator()(const non_const_value_type& x) const
    {return hash_(x.first);}
    size_type operator()(const key_type& x) const
    {return hash_(x);}
  private:
    hasher hash_;

    value_hash_imp() {}
    value_hash_imp(hasher h) : hash_(h) {}
    const hasher& key_hash() const {return hash_;}

    friend class unordered_map;
  };

  template <bool, bool = true>
  class value_compare_imp
    : key_equal
  {
  public:
    typedef value_type first_argument_type;
    typedef value_type second_argument_type;
    typedef bool       result_type;

    bool operator()(const value_type& x, const value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const non_const_value_type& x, const value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const value_type& x, const non_const_value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const key_type& x, const value_type& y) const
    {return comp()(x, y.first);}
    bool operator()(const value_type& x, const key_type& y) const
    {return comp()(x.first, y);}
  private:

    value_compare_imp() {}
    value_compare_imp(key_equal c) : key_equal(c) {}
    const key_equal& comp() const {return *this;}

    friend class unordered_map;
  };

  template <bool b>
  class value_compare_imp<false, b>
  {
  public:
    typedef value_type first_argument_type;
    typedef value_type second_argument_type;
    typedef bool       result_type;

    bool operator()(const value_type& x, const value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const non_const_value_type& x, const value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const value_type& x, const non_const_value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const key_type& x, const value_type& y) const
    {return comp_(x, y.first);}
    bool operator()(const value_type& x, const key_type& y) const
    {return comp_(x.first, y);}
  private:
    key_equal comp_;

    value_compare_imp() {}
    value_compare_imp(key_equal c) : comp_(c) {}
    const key_equal& comp() const {return comp_;}

    friend class unordered_map;
  };

public:
  typedef value_hash_imp<is_empty<hasher>::value>     value_hasher;
  typedef value_compare_imp<is_empty<key_equal>::value> value_compare;
private:
  typedef CodeWarrior::hash_table<value_type,value_hasher, value_compare, Allocator> hash_type;
public:
  typedef typename hash_type::iterator              iterator;
  typedef typename hash_type::const_iterator        const_iterator;
  typedef typename hash_type::local_iterator        local_iterator;
  typedef typename hash_type::const_local_iterator  const_local_iterator;

  // construct/destroy/copy
  explicit
  unordered_map(size_type n = 0 ,
                const hasher& hf = hasher(),
                const key_equal& eql = key_equal(),
                const allocator_type& a = allocator_type()):
    table_(n, value_hasher(hf), value_compare(eql),
           1.F,4.F,a){}

  template<class InputIterator>
  unordered_map(InputIterator f, InputIterator l,
                size_type n = 0,
                const hasher& hf = hasher(),
                const key_equal& eql = key_equal(),
                const allocator_type& a = allocator_type()):
    table_(f,l,false /* multi */,
           n, value_hasher(hf), value_compare(eql),
           1.F,4.F,a){}

#ifdef _EWL_MOVE
  unordered_map(unordered_map&& um) : table_(_STD::move(um.table_)){}
  unordered_map& operator=(unordered_map&& um) { swap(_STD::move(um)); return *this; }
#endif

  allocator_type
  get_allocator() const
  { return table_.get_allocator(); }

  // size and capacity
  bool empty() const
  { return table_.empty(); }

  size_type
  size() const
  { return table_.size(); }

  size_type
  max_size() const
  { return table_.max_size(); }

  // iterators
  iterator
  begin()
  { return table_.begin(); }

  const_iterator
  begin() const
  { return table_.begin(); }

  iterator
  end()
  { return table_.end(); }

  const_iterator
  end() const
  { return table_.end(); }

  // modifiers
#ifdef _EWL_MOVE
  _STD::pair<iterator, bool> insert(const non_const_value_type& x)
  {return table_.insert_one(x);}
  _STD::pair<iterator, bool> insert(non_const_value_type&& x)
  {return table_.insert_one(_STD::move(x));}
  iterator insert(iterator, const non_const_value_type& x)
  {return table_.insert_one(x).first;}
  iterator insert(iterator, non_const_value_type&& x)
  {return table_.insert_one(_STD::move(x)).first;}
#endif  // _EWL_MOVE

  _STD::pair<iterator, bool>
  insert(const value_type& obj)
  { return table_.insert_one(obj); }

  iterator
  insert(iterator /*hint*/, const value_type& obj)
  { return table_.insert_one(obj).first; }

  const_iterator
  insert(const_iterator hint, const value_type& obj)
  { return table_.insert_one(obj).first; }

  template<typename InputIterator>
  void insert(InputIterator first, InputIterator last)
  { table_.insert_one(first,last); }

  iterator
  erase(iterator position)
  { return table_.erase(position); }

  const_iterator
  erase(const_iterator position)
  { return table_.erase(position); }

  size_type
  erase(const key_type& k)
  { return table_.erase_one(k); }

  iterator
  erase(iterator first, iterator last)
  { return table_.erase(first,last); }

  const_iterator
  erase(const_iterator first, const_iterator last)
  { return table_.erase(first,last); }

  void clear()
  { table_.clear(); }

#ifdef _EWL_MOVE
  void
  swap(unordered_map && rhs)
  {CodeWarrior::swap(table_, rhs.table_); }
#else
  void
  swap(unordered_map & rhs)
  { CodeWarrior::swap(table_, rhs.table_); }
#endif

  // Observers
  hasher
  hash_function() const
  { return table_.value_hash().key_hash(); }

  key_equal
  key_eq() const
  { return table_.value_comp().comp(); }

  // lookup
  iterator
  find(const key_type & k)
  { return table_.find(k); }

  const_iterator
  find(const key_type & k) const
  { return table_.find(k); }

  size_type
  count(const key_type & k) const
  { return table_.count_one(k); }

  _STD::pair<iterator, iterator>
  equal_range(const key_type & k)
  { return table_.equal_range(k); }

  _STD::pair<const_iterator,const_iterator>
  equal_range(const key_type & k) const
  { return table_.equal_range(k); }

  mapped_type& operator[](const key_type& k)
  { return table_.template find_or_insert<key_type,mapped_type>(k).second; }

# ifdef _EWL_MOVE
  unordered_map& operator[](key_type&& x)
  { return table_.template find_or_insert<key_type,mapped_type>(_STD::move(x)).second ;}
# endif

  // bucket interface
  size_type
  bucket_count() const
  { return table_.bucket_count(); }

  size_type
  max_bucket_count() const
  { return table_.max_size(); }

  size_type
  bucket_size(size_type which_bucket) const
  { return table_.bucket_size(which_bucket); }

  size_type
  bucket(const key_type & k) const
  { return table_.value_hash()(k) % table_.bucket_count(); }

  local_iterator
  begin(size_type n)
  { return table_.begin(n); }

  const_local_iterator
  begin(size_type n) const
  { return table_.begin(n); }

  local_iterator
  end(size_type n)
  { return table_.end(n); }

  const_local_iterator
  end(size_type n) const
  { return table_.end(n); }

  // hash policy
  float
  load_factor() const
  { return table_.load_factor(); }

  float
  max_load_factor() const
  { return table_.load_factor_limit(); }

  void
  max_load_factor(float z)
  { table_.load_factor_limit(z); }

  void
  rehash(size_type n)
  { table_.bucket_count(n); }

private:
  hash_type table_;
};

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,
          unordered_map<Key, T, Hash, Pred, Alloc>& y)
{
  x.swap(y);
}

#ifdef _EWL_MOVE

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_map<Key, T, Hash, Pred, Alloc>&& x,
          unordered_map<Key, T, Hash, Pred, Alloc>& y)
{
  y.swap(_STD::move(x));
}

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,
          unordered_map<Key, T, Hash, Pred, Alloc>&& y)
{
  x.swap(_STD::move(y));
}

#endif // _EWL_MOVE

template <
  class Key,
  class T,
  class Hash = hash<Key>,
  class Compare = _STD::equal_to<Key>,
  class Allocator = _STD::allocator<_STD::pair<const Key, T> >
  >
class unordered_multimap
{
public:
  // types
  typedef Key key_type;
  typedef _STD::pair<const Key, T> value_type;
  typedef T mapped_type;
  typedef Hash hasher;
  typedef Compare key_equal;
  typedef Allocator allocator_type;
  typedef typename allocator_type::pointer         pointer;
  typedef typename allocator_type::const_pointer   const_pointer;
  typedef typename allocator_type::reference       reference;
  typedef typename allocator_type::const_reference const_reference;

  typedef typename allocator_type::size_type       size_type;
  typedef typename allocator_type::difference_type difference_type;

private:
  typedef typename CodeWarrior::remove_const<key_type>::type	non_const_key_type;
  typedef _STD::pair<non_const_key_type, mapped_type>			non_const_value_type;

  template <bool, bool = true>
  class value_hash_imp
    : hasher
  {
  public:
    typedef value_type argument_type;
    typedef size_type  result_type;

    size_type operator()(const value_type& x) const
    {return key_hash()(x.first);}
    size_type operator()(const non_const_value_type& x) const
    {return key_hash()(x.first);}
    size_type operator()(const key_type& x) const
    {return key_hash()(x);}
  private:
    value_hash_imp() {}
    value_hash_imp(hasher h) : hasher(h) {}
    const hasher& key_hash() const {return *this;}

    friend class unordered_multimap;
  };

  template <bool b>
  class value_hash_imp<false, b>
  {
  public:
    typedef value_type argument_type;
    typedef size_type  result_type;

    size_type operator()(const value_type& x) const
    {return hash_(x.first);}
    size_type operator()(const non_const_value_type& x) const
    {return hash_(x.first);}
    size_type operator()(const key_type& x) const
    {return hash_(x);}
  private:
    hasher hash_;

    value_hash_imp() {}
    value_hash_imp(hasher h) : hash_(h) {}
    const hasher& key_hash() const {return hash_;}

    friend class unordered_multimap;
  };

  template <bool, bool = true>
  class value_compare_imp
    : key_equal
  {
  public:
    typedef value_type first_argument_type;
    typedef value_type second_argument_type;
    typedef bool       result_type;

    bool operator()(const value_type& x, const value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const non_const_value_type& x, const value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const value_type& x, const non_const_value_type& y) const
    {return comp()(x.first, y.first);}
    bool operator()(const key_type& x, const value_type& y) const
    {return comp()(x, y.first);}
    bool operator()(const value_type& x, const key_type& y) const
    {return comp()(x.first, y);}
  private:

    value_compare_imp() {}
    value_compare_imp(key_equal c) : key_equal(c) {}
    const key_equal& comp() const {return *this;}

    friend class unordered_multimap;
  };

  template <bool b>
  class value_compare_imp<false, b>
  {
  public:
    typedef value_type first_argument_type;
    typedef value_type second_argument_type;
    typedef bool       result_type;

    bool operator()(const value_type& x, const value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const non_const_value_type& x, const value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const value_type& x, const non_const_value_type& y) const
    {return comp_(x.first, y.first);}
    bool operator()(const key_type& x, const value_type& y) const
    {return comp_(x, y.first);}
    bool operator()(const value_type& x, const key_type& y) const
    {return comp_(x.first, y);}
  private:
    key_equal comp_;

    value_compare_imp() {}
    value_compare_imp(key_equal c) : comp_(c) {}
    const key_equal& comp() const {return comp_;}

    friend class unordered_multimap;
  };
public:
  typedef value_hash_imp<is_empty<hasher>::value>     value_hasher;
  typedef value_compare_imp<is_empty<key_equal>::value> value_compare;
private:
  typedef CodeWarrior::hash_table<value_type, value_hasher, value_compare, Allocator> hash_type;
public:
  typedef typename hash_type::iterator                   iterator;
  typedef typename hash_type::const_iterator             const_iterator;
  typedef typename hash_type::local_iterator             local_iterator;
  typedef typename hash_type::const_local_iterator       const_local_iterator;


  // construct/destroy/copy
  explicit
  unordered_multimap(size_type n = 0 ,
                     const hasher& hf = hasher(),
                     const key_equal& eql = key_equal(),
                     const allocator_type& a = allocator_type()):
    table_(n, value_hasher(hf), value_compare(eql),
           1.F,4.F,a){}

  template<class InputIterator>
  unordered_multimap(InputIterator f, InputIterator l,
                     size_type n = 0,
                     const hasher& hf = hasher(),
                     const key_equal& eql = key_equal(),
                     const allocator_type& a = allocator_type()):
    table_(f,l,true /* multi */,
           n, value_hasher(hf), value_compare(eql),
           1.F,4.F,a){}

#ifdef _EWL_MOVE
  unordered_multimap(unordered_multimap&& um) : table_(_STD::move(um.table_)) {}
  unordered_multimap& operator=(unordered_multimap&& um) { swap(_STD::move(um)); return *this;}
#endif

  allocator_type
  get_allocator() const
  { return table_.get_allocator(); }

  // size and capacity
  bool empty() const
  { return table_.empty(); }

  size_type
  size() const
  { return table_.size(); }

  size_type
  max_size() const
  { return table_.max_size(); }

  // iterators
  iterator
  begin()
  { return table_.begin(); }

  const_iterator
  begin() const
  { return table_.begin(); }

  iterator
  end()
  { return table_.end(); }

  const_iterator
  end() const
  { return table_.end(); }

  // modifiers
  iterator
  insert(const value_type& obj)
  { return table_.insert_multi(obj); }

  iterator
  insert(iterator hint, const value_type& obj)
  { return table_.insert_multi(hint,obj); }

  const_iterator
  insert(const_iterator hint, const value_type& obj)
  { return table_.insert_multi(hint,obj); }

  template<typename InputIterator>
  void insert(InputIterator first, InputIterator last)
  { table_.insert_multi(first,last); }

#ifdef _EWL_MOVE
  iterator
  insert(const non_const_value_type& x)
  {return table_.insert_multi(x);}

  iterator
  insert(non_const_value_type&& x)
  {return table_.insert_multi(_STD::move(x));}

  iterator
  insert(iterator p, const non_const_value_type& x)
  {return table_.insert_multi(p, x);}

  iterator
  insert(iterator p, non_const_value_type&& x)
  {return table_.insert_multi(p, _STD::move(x));}
#endif  // _EWL_MOVE

  iterator
  erase(iterator position)
  { return table_.erase(position); }

  const_iterator
  erase(const_iterator position)
  { return table_.erase(position); }

  size_type
  erase(const key_type& k)
  { return table_.erase_multi(k); }

  iterator
  erase(iterator first, iterator last)
  { return table_.erase(first,last); }

  const_iterator
  erase(const_iterator first, const_iterator last)
  { return table_.erase(first,last); }

  void clear()
  { table_.clear(); }

#ifdef _EWL_MOVE
  void
  swap(unordered_multimap&& rhs)
  { CodeWarrior::swap(table_,rhs.table_); }
#else
  void
  swap(unordered_multimap & rhs)
  { CodeWarrior::swap(table_,rhs.table_); }
#endif

  // Observers
  hasher
  hash_function() const
  { return table_.value_hash().key_hash(); }

  key_equal
  key_eq() const
  { return table_.value_comp().comp(); }

  // lookup
  iterator
  find(const key_type & k)
  { return table_.find(k); }

  const_iterator
  find(const key_type & k) const
  { return table_.find(k); }

  size_type
  count(const key_type & k) const
  { return table_.count_multi(k); }

  _STD::pair<iterator, iterator>
  equal_range(const key_type & k)
  { return table_.equal_range(k); }

  _STD::pair<const_iterator,const_iterator>
  equal_range(const key_type & k) const
  { return table_.equal_range(k); }

  // bucket interface
  size_type
  bucket_count() const
  { return table_.bucket_count(); }

  size_type
  max_bucket_count() const
  { return table_.max_size(); }

  size_type
  bucket_size(size_type which_bucket) const
  { return table_.bucket_size(which_bucket); }

  size_type
  bucket(const key_type & k) const
  { return hash_function()(k) % bucket_count(); }

  local_iterator
  begin(size_type n)
  { return table_.begin(n); }

  const_local_iterator
  begin(size_type n) const
  { return table_.begin(n); }

  local_iterator
  end(size_type n)
  { return table_.end(n); }

  const_local_iterator
  end(size_type n) const
  { return table_.end(n); }

  // hash policy
  float
  load_factor() const
  { return table_.load_factor(); }

  float
  max_load_factor() const
  { return table_.load_factor_limit(); }

  void
  max_load_factor(float z)
  { table_.load_factor_limit(z); }

  void
  rehash(size_type n)
  { table_.bucket_count(n); }

private:
  hash_type table_;
};

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>& x,
          unordered_multimap<Key, T, Hash, Pred, Alloc>& y)
{
  x.swap(y);
}

#ifdef _EWL_MOVE

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>&& x,
          unordered_multimap<Key, T, Hash, Pred, Alloc>& y)
{
  y.swap(_STD::move(x));
}

template <class Key, class T, class Hash, class Pred, class Alloc>
void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>& x,
          unordered_multimap<Key, T, Hash, Pred, Alloc>&& y)
{
  x.swap(_STD::move(y));
}

#endif // _EWL_MOVE

_EWL_END_TR1_NAMESPACE

} // extern "C++"

#endif  // __CWCC__ >= 0x3200

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
#pragma bool reset
#endif

#ifdef __CWCC__
#pragma options align=reset
#endif

#endif // _UNORDERED_MAP
