/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/06/28 06:41:54 $
 * $Revision: 1.2 $
 */

#ifndef _HASH_FUN
#define _HASH_FUN

/*
	WARNING - WARNING - WARNING

	This header is NON-STANDARD

	The classes herein are offered as extensions to the C++ standard.
	They are marked as such by the namespace CodeWarrior.
*/

/*  hash_fun synopsis

namespace CodeWarrior
{

template <class T>
struct hash
	: std::unary_function<T, std::size_t>
{
	std::size_t operator()(const T& key) const;
};

template <class charT, class traits, class Allocator>
struct hash<std::basic_string<charT, traits, Allocator> >
	: std::unary_function<std::basic_string<charT, traits, Allocator>, std::size_t>
{
	typedef std::basic_string<charT, traits, Allocator> string_type;
	std::size_t operator()(const string_type& key) const;
};

template <>
struct hash<const char*>
	: std::unary_function<const char*, std::size_t>
{
	typedef const char* string_type;
	std::size_t operator()(string_type key) const;
};

}  // CodeWarrior
*/

#include <ewlconfig>
#include <functional>

#ifdef __CWCC__
#pragma options align=native
#endif

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#if _EWL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#if _EWL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT

#ifndef _EWL_NO_CPP_NAMESPACE
	namespace CodeWarrior {
#else
	#ifndef CodeWarrior
		#define CodeWarrior
	#endif
#endif  // _EWL_NO_CPP_NAMESPACE

using _STD_TR1::hash;

#ifndef _EWL_NO_CPP_NAMESPACE
	} // namespace CodeWarrior
#endif

extern "C++" {

_EWL_START_TR1_NAMESPACE

template <typename T>
struct hash
	: _STD::unary_function<T, _CSTD::size_t>
{
	_CSTD::size_t operator()(const T& key) const
		{return static_cast<_CSTD::size_t>(key);}
};

template <class T>
struct hash<CodeWarrior::move_ptr<T> >
  : _STD::unary_function<CodeWarrior::move_ptr<T>, _CSTD::size_t>
{
  _CSTD::size_t operator()(const CodeWarrior::move_ptr<T>& key) const
		{return reinterpret_cast<_CSTD::size_t>(key.get());}
};

_EWL_END_TR1_NAMESPACE

} // extern "C++"

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#ifdef __CWCC__
#pragma options align=reset
#endif

#endif  // _HASH_FUN
