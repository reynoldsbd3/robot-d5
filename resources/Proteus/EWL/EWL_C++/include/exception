/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/07/12 22:31:16 $
 * $Revision: 1.3 $
 */

#ifndef _EXCEPTION
#define _EXCEPTION

/*  exception synopsis

namespace std
{

class exception;
{
public:
	exception() throw();
	exception(const exception&) throw();
	exception& operator=(const exception&) throw();
	virtual ~exception() throw();
	virtual const char* what() const throw();
};

class bad_exception
	: public exception
{
public:
	bad_exception() throw();
	bad_exception(const bad_exception&) throw();
	bad_exception& operator=(const bad_exception&) throw();
	virtual ~bad_exception() throw();
	virtual const char* what() const throw();
};

typedef void (*unexpected_handler)();
unexpected_handler set_unexpected(unexpected_handler f) throw();
void unexpected();

typedef void (*terminate_handler)();
terminate_handler set_terminate(terminate_handler f) throw();
void terminate();

bool uncaught_exception();

}  // std
*/

#include <ewlconfig>

#ifdef __CWCC__
#pragma options align=native

#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#if _EWL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _EWL_FORCE_ENUMS_ALWAYS_INT

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#if _EWL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _EWL_FORCE_ENABLE_BOOL_SUPPORT

#endif //__CWCC__
 
#ifdef __GNUC__
_EWL_BEGIN_EXTERN_CPP
#endif

_EWL_BEGIN_NAMESPACE_STD

	// Removed string and bool from this class.  This data is moved into
	// derived classes if and when needed.
	class exception {  
	public :
	    exception () _EWL_NO_THROW {}
	    exception (const exception&) _EWL_NO_THROW {}
	    exception& operator= (const exception&) _EWL_NO_THROW {return *this;}
	    virtual ~exception () _EWL_NO_THROW {}
	    virtual const char* what () const _EWL_NO_THROW {return "exception";}
	};

	class bad_exception : public exception {
	public:
		bad_exception() _EWL_NO_THROW {}
		bad_exception(const bad_exception&) _EWL_NO_THROW {}
		bad_exception& operator=(const bad_exception&) _EWL_NO_THROW { return *this; }
		virtual ~bad_exception() _EWL_NO_THROW {};
		virtual const char* what() const _EWL_NO_THROW { return "bad_exception"; }
	};

	typedef void (_EWL_CDECL *unexpected_handler)();
	_EWL_IMP_EXP_RUNTIME unexpected_handler _EWL_CDECL set_unexpected(unexpected_handler f) _EWL_NO_THROW;
	_EWL_IMP_EXP_RUNTIME void _EWL_CDECL unexpected();

#ifndef _EWL_NO_UNCAUGHT_EXCEPTION
_EWL_END_NAMESPACE_STD
	extern "C" _EWL_IMP_EXP_RUNTIME bool _EWL_CDECL __uncaught_exception(void);

	_EWL_BEGIN_NAMESPACE_STD

	inline
	bool _EWL_CDECL
	uncaught_exception() throw()
	{
		return __uncaught_exception();
	}
#endif // _EWL_NO_UNCAUGHT_EXCEPTION

	typedef void (_EWL_CDECL *terminate_handler)();
	_EWL_IMP_EXP_RUNTIME terminate_handler _EWL_CDECL set_terminate(terminate_handler f) _EWL_NO_THROW;
	_EWL_IMP_EXP_RUNTIME void _EWL_CDECL terminate() _EWL_NORETURN;

_EWL_END_NAMESPACE_STD

#ifdef __GNUC__
	_EWL_END_EXTERN_CPP
#endif

#ifdef __CWCC__
#ifdef _EWL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _EWL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset
#endif

#endif  // _EXCEPTION
